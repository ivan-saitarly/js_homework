// Операція конкатенації рядків.
// В цьому виразі 'number' + 3 + 3, JavaScript спочатку об'єднує рядок 'number' з числом 3, яке автоматично конвертується у рядок '3'. 
// Потім друге число 3 також конвертується у рядок '3'. 
// Отже, результатом є рядок "number33".
console.log('number' + 3 + 3);

// Операція додавання чисел.
// У цьому виразі null + 3, JavaScript перетворює null у число, що призводить до числової операції. null перетворюється у 0, тому результат додавання буде 3.
// Результат: 3
console.log(null + 3);

// Логічна операція "і"
// Вираз 5 && "qwerty" є логічною операцією "і". 
// Якщо обидва операнди є істинними (не являються false, null, undefined, 0, NaN, або ""), то вираз поверне останній операнд. 
// Тут обидва операнди істинні, тому повертається рядок "qwerty".
// Результат: "qwerty"
console.log(5 && "qwerty");

// Унарна оператор "+" перетворює стрічки у числа.
// Вираз +'40' + +'2' + "hillel" використовує унарний оператор +, що перетворює рядки у числа. Таким чином, '40' перетворюється у число 40, а '2' у число 2. Далі відбувається додавання чисел 40 і 2, результатом чого є число 42. Потім до числа 42 додається рядок "hillel", що призводить до результату "42hillel".
// Результат: 42hillel
console.log(+'40' + +'2' + "hillel");

// Операція віднімання рядків, а потім порівняння строгої рівності.
// У цьому виразі '10' - 5 === 6, рядок '10' перетворюється у число 10. Потім від числа 10 віднімається число 5, що дає результат 5. Цей результат порівнюється строго з числом 6. Оскільки 5 не дорівнює 6, результатом є false.
// Результат: true
console.log('10' - 5 === 6);

// Операція додавання булевих значень.
// У виразі true + false, булеве значення true перетворюється у число 1, а false у число 0. Таким чином, додавання 1 + 0 дає результат 1.
// Результат: 1
console.log(true + false);

// Операція віднімання рядка з числом.
// У цьому виразі '4px' - 3, рядок '4px' не може бути перетворений у число, тому JavaScript поверне NaN (Not a Number).
// Результат: NaN
console.log('4px' - 3);

// Операція віднімання рядків, перетворення в числа.
// Вираз '4' - 3 використовується для віднімання рядка '4' перетворюється у число 4, і від нього віднімається число 3. Результатом буде число 1.
// Результат: 1
console.log('4' - 3);

// Операція додавання рядка до результату піднесення до степені.
// Вираз '6' + 3 ** 0 виконує піднесення числа 3 до степені 0 (що дорівнює 1), а потім конкатенує результат з рядком '6'. Таким чином, результатом є рядок "61".
// Результат: "61"
console.log('6' + 3 ** 0);

// Операція ділення чисел.
// У цьому виразі 12 / '6', рядок '6' перетворюється у число 6, і потім число 12 ділиться на 6. Результатом є число 2.
// Результат: 2
console.log(12 / '6');

// Операція конкатенації рядків з результатом порівняння.
// У цьому виразі '10' + (5 === 6), результатом порівняння 5 === 6 є false, яке автоматично конвертується у рядок "false". Потім рядки '10' і "false" конкатенуються, що дає результат "10false".
// Результат: "10false"
console.log('10' + (5 === 6));

// Операція порівняння з автоматичним приведенням типів.
// У цьому виразі null == '', null не дорівнює пустому рядку '' у JavaScript, тому результатом є false.
// Результат: false
console.log(null == '');

// Операція піднесення до степені з числовими значеннями.
// У цьому виразі 3 ** (9 / 3), спочатку виконується операція ділення 9 / 3, яка дорівнює 3. Потім число 3 підноситься до степені 3, що дає результат 27.
// Результат: 27
console.log(3 ** (9 / 3));

// Операція порівняння булевих значень.
// У цьому виразі !!'false' == !!'true', обидва рядки 'false' і 'true' перетворюються у булеві значення true, тому що будь-який непустий рядок в JS є істинним. Таким чином, обидва операнди в операції порівняння є істинними, і результатом є true.
// Результат: true
console.log(!!'false' == !!'true');

// Логічна операція "або" та "і"
// В цьому виразі спочатку виконується операція '0' && 1. Оператор && має вищий пріоритет, тому '0' && 1 повертає перший ложний операнд, який в даному случае є '0'. Потім операція 0 || '0' відбувається, де || повертає перший істинний операнд, який також є '0'. Отже, результатом є "0".
// Результат: "0"
console.log(0 || '0' && 1);

// Операція порівняння з автоматичним приведенням типів.
// В цьому виразі (+null == false) < 1, +null перетворюється у число 0, а false перетворюється у 0. Затим, порівнюється число 0 з 0, що дає результат true. Оскільки true автоматично конвертується в 1 для порівняння, результатом є true < 1, що також є true.
// Результат: true
console.log((+null == false) < 1);

// Логічна операція "і" та "або".
// У виразі false && true || true, операція && має вищий пріоритет, тому false && true вираховується, і результат є false. Потім операція false || true відбувається, де || повертає перший істинний операнд, який є true. Отже, результатом є true.
// Результат: true
console.log(false && true || true);


// Групування логічних операцій "і" та "або".
// В цьому виразі false && (false || true), спочатку вираховується вираз false || true, де || повертає перший істинний операнд, який тут є true. Потім результат true передається в операцію &&, де false && true дорівнює false. Отже, результатом є false.
// Результат: false
console.log(false && (false || true));

// Операція порівняння з автоматичним приведенням типів та піднесення до степені.
// У цьому виразі (+null == false) < 1 ** 5, +null перетворюється у число 0, а false перетворюється у 0. Тоді +null == false дорівнює true. Вираз 1 ** 5 підносить число 1 до степені 5, що також дорівнює 1. Отже, результатом є true < 1, що є true.
// Результат: 1 < 1 ** 5
console.log((+null == false) < 1 ** 5);





